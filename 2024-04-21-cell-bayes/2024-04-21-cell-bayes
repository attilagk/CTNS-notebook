{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c6f9de12-0f6b-4afd-acf4-6c1ec0d7bb16",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%reload_ext autoreload\n",
    "import arviz as az\n",
    "import pymc as pm\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as mpatches\n",
    "import seaborn as sns\n",
    "import cellbayesassay as cba\n",
    "import os.path\n",
    "import re\n",
    "import warnings\n",
    "import attila_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4b0ab4c5-0731-458f-8a53-076e2644b9b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Study</th>\n",
       "      <th>Experiment</th>\n",
       "      <th>Assay</th>\n",
       "      <th>Batch</th>\n",
       "      <th>Plate</th>\n",
       "      <th>TI</th>\n",
       "      <th>0</th>\n",
       "      <th>conc</th>\n",
       "      <th>concentration</th>\n",
       "      <th>conc_log10</th>\n",
       "      <th>Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>LPS neuroinflammation (BV2 cells)</td>\n",
       "      <td>IFN-γ</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LPS</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000e-09</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.043041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>LPS neuroinflammation (BV2 cells)</td>\n",
       "      <td>IFN-γ</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LPS</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000e-09</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.159173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>LPS neuroinflammation (BV2 cells)</td>\n",
       "      <td>IFN-γ</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LPS</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000e-09</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.029069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>LPS neuroinflammation (BV2 cells)</td>\n",
       "      <td>IFN-γ</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LPS</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000e-09</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.134404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>LPS neuroinflammation (BV2 cells)</td>\n",
       "      <td>IFN-γ</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LPS</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000e-09</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.106824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9253</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Aβ release (H4 cells)</td>\n",
       "      <td>Aβ38</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>RI</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>735.062800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9254</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Aβ release (H4 cells)</td>\n",
       "      <td>Aβ38</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>RI</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>641.874500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9255</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Aβ release (H4 cells)</td>\n",
       "      <td>Aβ38</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>RI</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>660.818400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9256</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Aβ release (H4 cells)</td>\n",
       "      <td>Aβ38</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>RI</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>696.078900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9257</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Aβ release (H4 cells)</td>\n",
       "      <td>Aβ38</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>RI</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>579.112900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9258 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Study                         Experiment  Assay  Batch  Plate   TI 0   \\\n",
       "0     CO28153  LPS neuroinflammation (BV2 cells)  IFN-γ      3      1  LPS      \n",
       "1     CO28153  LPS neuroinflammation (BV2 cells)  IFN-γ      3      1  LPS      \n",
       "2     CO28153  LPS neuroinflammation (BV2 cells)  IFN-γ      3      1  LPS      \n",
       "3     CO28153  LPS neuroinflammation (BV2 cells)  IFN-γ      3      1  LPS      \n",
       "4     CO28153  LPS neuroinflammation (BV2 cells)  IFN-γ      3      1  LPS      \n",
       "...       ...                                ...    ...    ...    ...  ... ..   \n",
       "9253  CO28153              Aβ release (H4 cells)   Aβ38      2      3   RI      \n",
       "9254  CO28153              Aβ release (H4 cells)   Aβ38      2      3   RI      \n",
       "9255  CO28153              Aβ release (H4 cells)   Aβ38      2      3   RI      \n",
       "9256  CO28153              Aβ release (H4 cells)   Aβ38      2      3   RI      \n",
       "9257  CO28153              Aβ release (H4 cells)   Aβ38      2      3   RI      \n",
       "\n",
       "     conc  concentration  conc_log10    Activity  \n",
       "0     NaN   1.000000e-09        -9.0    0.043041  \n",
       "1     NaN   1.000000e-09        -9.0    0.159173  \n",
       "2     NaN   1.000000e-09        -9.0    0.029069  \n",
       "3     NaN   1.000000e-09        -9.0    0.134404  \n",
       "4     NaN   1.000000e-09        -9.0    0.106824  \n",
       "...   ...            ...         ...         ...  \n",
       "9253  NaN            NaN         NaN  735.062800  \n",
       "9254  NaN            NaN         NaN  641.874500  \n",
       "9255  NaN            NaN         NaN  660.818400  \n",
       "9256  NaN            NaN         NaN  696.078900  \n",
       "9257  NaN            NaN         NaN  579.112900  \n",
       "\n",
       "[9258 rows x 11 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_fpath = '../../resources/cell-based-assays/data-format-specification_NIA_all-CO28151_CO28153-cleaned.xlsx'\n",
    "TI_fpath = '/Users/jonesa7/CTNS/resources/cell-based-assays/test-items2.csv'\n",
    "controls_fpath = '/Users/jonesa7/CTNS/resources/cell-based-assays/experiment-controls2.csv'\n",
    "data = cba.get_data(data_fpath, 'Sheet1', TI_fpath, controls_fpath)\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37a770a3-4515-48ef-8101-f09de92e5a3c",
   "metadata": {},
   "source": [
    "## Checking data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "852e63b8-889e-4ab2-a958-38eeb6ead5dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "check_data = False\n",
    "if check_data:\n",
    "    testdf = cba.fit_multiple_units(data, unit_list=None, do_fit=False, do_print=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e0a36ed1-5a98-4991-bfcb-f87fff72ec76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def data_plotter(study, experiment, assay, TI, batchvar='Batch', data=data):\n",
    "    df = data.loc[(data.Study == study) & (data.Experiment == experiment) & (data.Assay == assay) & (data.TI == TI)]\n",
    "    fig, ax = plt.subplots()\n",
    "    sns.scatterplot(x='conc_log10', y='Activity', hue=batchvar, data=df, ax=ax)\n",
    "    #ax.scatter(x='conc_log10', y='Activity', c=batchvar, data=df, marker='+')\n",
    "    ax.legend()\n",
    "    return((fig, ax))\n",
    "\n",
    "fig, ax = data_plotter('CO28153', 'Aβ release (H4 cells)', 'Aβ42', 'TI16', batchvar='Batch')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d5e5cd29-ab78-4d68-b03e-10c2b186b53d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = data_plotter('CO28153', 'Tau phosphorylation', 'Tau', 'TI17', batchvar='Plate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d88568f8-280d-45fe-abf1-546a91acc68a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = data_plotter('CO28153', 'Tau phosphorylation', 'pT/T ratio', 'TI17', batchvar='Plate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1061a2dc-1fd9-4cc6-b9a7-c30ad00fb991",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>study</th>\n",
       "      <th>exper</th>\n",
       "      <th>assay</th>\n",
       "      <th>TI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">CO28151</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">Aβ clearance (BV2 cells)</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">Aβ42 Ly</th>\n",
       "      <th>TI1</th>\n",
       "      <td>CO28151</td>\n",
       "      <td>Aβ clearance (BV2 cells)</td>\n",
       "      <td>Aβ42 Ly</td>\n",
       "      <td>TI1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI10</th>\n",
       "      <td>CO28151</td>\n",
       "      <td>Aβ clearance (BV2 cells)</td>\n",
       "      <td>Aβ42 Ly</td>\n",
       "      <td>TI10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI11</th>\n",
       "      <td>CO28151</td>\n",
       "      <td>Aβ clearance (BV2 cells)</td>\n",
       "      <td>Aβ42 Ly</td>\n",
       "      <td>TI11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI12</th>\n",
       "      <td>CO28151</td>\n",
       "      <td>Aβ clearance (BV2 cells)</td>\n",
       "      <td>Aβ42 Ly</td>\n",
       "      <td>TI12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI13</th>\n",
       "      <td>CO28151</td>\n",
       "      <td>Aβ clearance (BV2 cells)</td>\n",
       "      <td>Aβ42 Ly</td>\n",
       "      <td>TI13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">CO28153</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">Trophic factor withdrawal (primary neurons)</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">MTT</th>\n",
       "      <th>TI18</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Trophic factor withdrawal (primary neurons)</td>\n",
       "      <td>MTT</td>\n",
       "      <td>TI18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI19</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Trophic factor withdrawal (primary neurons)</td>\n",
       "      <td>MTT</td>\n",
       "      <td>TI19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI21</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Trophic factor withdrawal (primary neurons)</td>\n",
       "      <td>MTT</td>\n",
       "      <td>TI21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI22</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Trophic factor withdrawal (primary neurons)</td>\n",
       "      <td>MTT</td>\n",
       "      <td>TI22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TI23</th>\n",
       "      <td>CO28153</td>\n",
       "      <td>Trophic factor withdrawal (primary neurons)</td>\n",
       "      <td>MTT</td>\n",
       "      <td>TI23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>370 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                    study  \\\n",
       "CO28151 Aβ clearance (BV2 cells)                    Aβ42 Ly TI1   CO28151   \n",
       "                                                            TI10  CO28151   \n",
       "                                                            TI11  CO28151   \n",
       "                                                            TI12  CO28151   \n",
       "                                                            TI13  CO28151   \n",
       "...                                                                   ...   \n",
       "CO28153 Trophic factor withdrawal (primary neurons) MTT     TI18  CO28153   \n",
       "                                                            TI19  CO28153   \n",
       "                                                            TI21  CO28153   \n",
       "                                                            TI22  CO28153   \n",
       "                                                            TI23  CO28153   \n",
       "\n",
       "                                                                                                        exper  \\\n",
       "CO28151 Aβ clearance (BV2 cells)                    Aβ42 Ly TI1                      Aβ clearance (BV2 cells)   \n",
       "                                                            TI10                     Aβ clearance (BV2 cells)   \n",
       "                                                            TI11                     Aβ clearance (BV2 cells)   \n",
       "                                                            TI12                     Aβ clearance (BV2 cells)   \n",
       "                                                            TI13                     Aβ clearance (BV2 cells)   \n",
       "...                                                                                                       ...   \n",
       "CO28153 Trophic factor withdrawal (primary neurons) MTT     TI18  Trophic factor withdrawal (primary neurons)   \n",
       "                                                            TI19  Trophic factor withdrawal (primary neurons)   \n",
       "                                                            TI21  Trophic factor withdrawal (primary neurons)   \n",
       "                                                            TI22  Trophic factor withdrawal (primary neurons)   \n",
       "                                                            TI23  Trophic factor withdrawal (primary neurons)   \n",
       "\n",
       "                                                                    assay  \\\n",
       "CO28151 Aβ clearance (BV2 cells)                    Aβ42 Ly TI1   Aβ42 Ly   \n",
       "                                                            TI10  Aβ42 Ly   \n",
       "                                                            TI11  Aβ42 Ly   \n",
       "                                                            TI12  Aβ42 Ly   \n",
       "                                                            TI13  Aβ42 Ly   \n",
       "...                                                                   ...   \n",
       "CO28153 Trophic factor withdrawal (primary neurons) MTT     TI18      MTT   \n",
       "                                                            TI19      MTT   \n",
       "                                                            TI21      MTT   \n",
       "                                                            TI22      MTT   \n",
       "                                                            TI23      MTT   \n",
       "\n",
       "                                                                    TI  \n",
       "CO28151 Aβ clearance (BV2 cells)                    Aβ42 Ly TI1    TI1  \n",
       "                                                            TI10  TI10  \n",
       "                                                            TI11  TI11  \n",
       "                                                            TI12  TI12  \n",
       "                                                            TI13  TI13  \n",
       "...                                                                ...  \n",
       "CO28153 Trophic factor withdrawal (primary neurons) MTT     TI18  TI18  \n",
       "                                                            TI19  TI19  \n",
       "                                                            TI21  TI21  \n",
       "                                                            TI22  TI22  \n",
       "                                                            TI23  TI23  \n",
       "\n",
       "[370 rows x 4 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b1 = (data.Study == 'CO28153') & (data.Experiment == 'Aβ release (H4 cells)') & (data.Assay == 'Aβ42') & (data.TI == 'TI16') & (data.Batch == 2)\n",
    "b2 = (data.Study == 'CO28153') & (data.Experiment == 'Tau phosphorylation') & (data.Assay == 'Tau') & (data.TI == 'TI17') & (data.Plate == 4)\n",
    "b3 = (data.Study == 'CO28153') & (data.Experiment == 'Tau phosphorylation') & (data.Assay == 'pT/T ratio') & (data.TI == 'TI17') & (data.Plate == 4)\n",
    "b4 = (data.Study == 'CO28153') & (data.Experiment == 'Tau phosphorylation') & (data.Assay == 'pTau (T231)') & (data.TI == 'TI17') & (data.Plate == 4)\n",
    "cba.fit_multiple_units(data.loc[~ (b1 | b2 | b3 | b4)], unit_list=None, do_fit=False, do_print=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "98482a0c-d73d-46ba-8d7b-87bb2d97750e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "idatas read from netcdf\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "study    experiment                                   assay    TI  \n",
       "CO28151  Aβ clearance (BV2 cells)                     Aβ42 Ly  TI1     (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI2     (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI3     (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI4     (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI5     (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                                                             ...                        \n",
       "CO28153  Trophic factor withdrawal (primary neurons)  MTT      TI18    (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI19    (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI21    (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI22    (posterior, log_likelihood, sample_stats, obse...\n",
       "                                                               TI23    (posterior, log_likelihood, sample_stats, obse...\n",
       "Length: 367, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maindir = '../../results/2024-04-21-cell-bayes/'\n",
    "\n",
    "if not os.path.exists(maindir + 'idatas/fpaths.csv'):\n",
    "    idatadf = cba.fit_multiple_units(data, unit_list=None, accept_multi_batches=True)\n",
    "    idatas = idatadf.idata\n",
    "    fpathdf = cba.idatas_to_netcdf(idatas.dropna(), subdir='idatas/', maindir=maindir)\n",
    "    print('idatas written to netcdf')\n",
    "    # write 3 records for which fit resulted in None instead of arviz.data.inference_data.InferenceData\n",
    "    fpath = '../../results/2024-04-21-cell-bayes/fits-resulting-in-None.csv'\n",
    "    idatas.loc[idatas.apply(lambda x: not isinstance(x, az.data.inference_data.InferenceData))].to_csv(fpath)\n",
    "else:\n",
    "    idatas = cba.idatas_from_netcdf(subdir='idatas/', maindir=maindir)\n",
    "    print('idatas read from netcdf')\n",
    "\n",
    "idatas = cba.sort_index_TI(idatas)\n",
    "idatas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "aa8509b0-275f-4399-9fff-7b56dcb4b5b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"shell_port\": 55843,\n",
      "  \"iopub_port\": 55844,\n",
      "  \"stdin_port\": 55845,\n",
      "  \"control_port\": 55847,\n",
      "  \"hb_port\": 55846,\n",
      "  \"ip\": \"127.0.0.1\",\n",
      "  \"key\": \"5addfb5a-a7eb33ca401dc2427e9bc90d\",\n",
      "  \"transport\": \"tcp\",\n",
      "  \"signature_scheme\": \"hmac-sha256\",\n",
      "  \"kernel_name\": \"python3\",\n",
      "  \"jupyter_session\": \"/Users/jonesa7/CTNS/notebooks/2024-04-21-cell-bayes/Untitled.ipynb\"\n",
      "}\n",
      "\n",
      "Paste the above JSON into a file, and connect with:\n",
      "    $> jupyter <app> --existing <file>\n",
      "or, if you are local, you can connect with just:\n",
      "    $> jupyter <app> --existing kernel-bbbba426-68f5-40de-a8f5-b9551c56fda6.json\n",
      "or even just:\n",
      "    $> jupyter <app> --existing\n",
      "if this is the most recent Jupyter kernel you have started.\n"
     ]
    }
   ],
   "source": [
    "%connect_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9f3cdb2-9414-4045-9509-627ba9f1d2b3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
